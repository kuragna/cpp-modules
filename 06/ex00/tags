!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/aabourri/projects/cpp-modules/06/ex00/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(NAME)	Makefile	/^$(NAME): $(SRC) #ScalarConverter.hpp$/;"	t
CHAR	main.cpp	/^	enum Type { CHAR, INT, FLOAT, DOUBLE, NONE };$/;"	e	enum:Data::Type	file:
CPPFLAGS	Makefile	/^CPPFLAGS	= -Wall -Werror -Wextra -std=c++98 -fsanitize=address #-fsanitize=undefined$/;"	m
Char	main.cpp	/^void Data::Char(long chr)$/;"	f	class:Data	typeref:typename:void
DOUBLE	main.cpp	/^	enum Type { CHAR, INT, FLOAT, DOUBLE, NONE };$/;"	e	enum:Data::Type	file:
Data	main.cpp	/^	Data(const std::string &str) : str(str) {}$/;"	f	class:Data	file:
Data	main.cpp	/^class Data$/;"	c	file:
Double	main.cpp	/^void	Data::Double(double d)$/;"	f	class:Data	typeref:typename:void
FLOAT	main.cpp	/^	enum Type { CHAR, INT, FLOAT, DOUBLE, NONE };$/;"	e	enum:Data::Type	file:
Float	main.cpp	/^void	Data::Float(double f)$/;"	f	class:Data	typeref:typename:void
INT	main.cpp	/^	enum Type { CHAR, INT, FLOAT, DOUBLE, NONE };$/;"	e	enum:Data::Type	file:
Int	main.cpp	/^void	Data::Int(long n)$/;"	f	class:Data	typeref:typename:void
NAME	Makefile	/^NAME		= convert$/;"	m
NONE	main.cpp	/^	enum Type { CHAR, INT, FLOAT, DOUBLE, NONE };$/;"	e	enum:Data::Type	file:
SCALAR_CONVERTER_HPP	ScalarConverter.hpp	/^#define SCALAR_CONVERTER_HPP$/;"	d
SRC	Makefile	/^SRC			= main.cpp #ScalarConverter.cpp$/;"	m
ScalarConverter	ScalarConverter.hpp	/^class ScalarConverter$/;"	c
Type	main.cpp	/^	enum Type { CHAR, INT, FLOAT, DOUBLE, NONE };$/;"	g	class:Data	file:
all	Makefile	/^all: $(NAME)$/;"	t
convert	ScalarConverter.cpp	/^void	ScalarConverter::convert(std::string const &str)$/;"	f	class:ScalarConverter	typeref:typename:void
convert	main.cpp	/^void ScalarConverter::convert(std::string const &str)$/;"	f	class:ScalarConverter	typeref:typename:void
countDecimalNumber	main.cpp	/^	static int	countDecimalNumber;$/;"	m	class:Data	typeref:typename:int	file:
countDecimalNumber	main.cpp	/^int	Data::countDecimalNumber = 1;$/;"	m	class:Data	typeref:typename:int
fclean	Makefile	/^fclean:$/;"	t
getChar	main.cpp	/^char Data::getChar(void)$/;"	f	class:Data	typeref:typename:char
getCountDecimalNumber	main.cpp	/^int	Data::getCountDecimalNumber(void)$/;"	f	class:Data	typeref:typename:int
getDecimal	main.cpp	/^double Data::getDecimal(void)$/;"	f	class:Data	typeref:typename:double
getIntegr	main.cpp	/^long int Data::getIntegr(void)$/;"	f	class:Data	typeref:typename:long int
getType	main.cpp	/^Data::Type Data::getType(void)$/;"	f	class:Data	typeref:typename:Data::Type
isDecimal	main.cpp	/^Data::Type Data::isDecimal(void)$/;"	f	class:Data	typeref:typename:Data::Type
isInteger	main.cpp	/^bool Data::isInteger(void)$/;"	f	class:Data	typeref:typename:bool
main	main.cpp	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
main	test.cpp	/^int main()$/;"	f	typeref:typename:int
re	Makefile	/^re: fclean all$/;"	t
str	main.cpp	/^	std::string str;$/;"	m	class:Data	typeref:typename:std::string	file:
test	test.cpp	/^void	test(void *ptr)$/;"	f	typeref:typename:void
types	main.cpp	/^const char *types[] = {"char", "int", "float", "double", "none"};$/;"	v	typeref:typename:const char * []
